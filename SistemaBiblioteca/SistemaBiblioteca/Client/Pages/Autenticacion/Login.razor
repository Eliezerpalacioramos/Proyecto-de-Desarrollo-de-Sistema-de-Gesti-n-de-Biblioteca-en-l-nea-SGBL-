@page "/"
@page "/pages/authentication/login"
@layout LoginLayout
@inject IUsuarioServicio _usuarioServicio;
@inject NavigationManager _navigationManager

<div class="login-page">
    <div class="login-container">
        <EditForm Model="@usuarioLogin" OnValidSubmit="OnValidSubmit" class="login-form">

            <DataAnnotationsValidator></DataAnnotationsValidator>

            <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center" Class="welcome-text">
                ¡Bienvenido!
            </MudText>

            <MudTextField T="string"
                          @bind-Value="@usuarioLogin.correo"
                          Label="Correo electrónico"
                          Variant="Variant.Outlined"
                          Class="my-4"
                          For="@(() => usuarioLogin.correo)">
            </MudTextField>

            <MudTextField @bind-Value="@usuarioLogin.clave"
                          Label="Contraseña"
                          Variant="Variant.Outlined"
                          InputType="@PasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="TogglePasswordVisibility"
                          For="@(() => usuarioLogin.clave)"
                          Class="my-4" />

            <MudButton Class="mt-5" Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Submit" Size="Size.Large"
                       FullWidth="true"
                       Disabled="@disableButton">Iniciar Sesión</MudButton>

            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="@(myImageClass + " mt-6")" />

        </EditForm>

        <MudAlert Severity="Severity.Error" Class="@(myAlert + " mt-8 mud-width-full")" Style="max-width:500px;" Elevation="25">
            Credenciales incorrectas. Por favor, inténtalo de nuevo.
        </MudAlert>
    </div>
</div>

<style>
    .login-page {
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: url('/images/login-background.jpg') no-repeat center center fixed;
        background-size: cover;
    }

    .login-container {
        background: rgba(255, 255, 255, 0.9);
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        max-width: 400px;
        width: 100%;
    }

    .welcome-text {
        color: #333;
    }
</style>

@code {
    UsuarioLogin usuarioLogin = new UsuarioLogin();
    string myImageClass { get; set; } = "d-none";
    string myAlert { get; set; } = "d-none";
    bool disableButton { get; set; } = false;

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task OnValidSubmit()
    {
        myImageClass = "d-block";
        disableButton = true;
        var result = await _usuarioServicio.IniciarSesion(usuarioLogin.correo, usuarioLogin.clave);

        if (result.status)
            _navigationManager.NavigateTo("/pages/dashboard");
        else
        {
            myImageClass = "d-none";
            disableButton = false;
            myAlert = "d-block";
        }
    }
}
