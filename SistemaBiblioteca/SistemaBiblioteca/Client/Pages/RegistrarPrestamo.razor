@page "/pages/registrarPrestamo"
@using SistemaBiblioteca.Client.Pages.Modales;
@inject MenuService _menuServicio;
@inject ILectorServicio _lectorServicio;
@inject IDialogService _dialogServicio
@inject IPrestamoServicio _prestamoServicio;
@inject ISnackbar _snackBar
@inject SweetAlertService Swal;

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <MudPaper Elevation="5" Class="pa-6" Width="100%" Style="background-color: #f7f7f7; border-radius: 12px;">

        <MudGrid>

            <MudItem xs="12">
                <MudCard Elevation="5" Class="mb-4" Outlined="true" Style="border-radius: 10px; background-color: #ffffff;">
                    <MudCardHeader>
                        <MudText Typo="Typo.h5" Color="Color.Primary" Class="text-center">Registrar Préstamo</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid Spacing="2">

                            <MudItem xs="12" md="6">
                                <MudAutocomplete T="LectorDTO" Label="Buscar Lector" @bind-Value="_lector" SearchFunc="@BuscarLector"
                                                 ResetValueOnEmptyText="true"
                                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                                 Variant="Variant.Outlined" Margin="Margin.Dense"
                                                 ToStringFunc="@(e => e == null ? null : $"{e.Codigo} - {e.Nombre} {e.Apellido}")" />
                            </MudItem>

                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="_libro.Titulo" Label="Libro" Variant="Variant.Outlined" ReadOnly="true" Margin="Margin.Dense" />
                            </MudItem>

                            <MudItem xs="12" md="6">
                                <MudButton Variant="Variant.Filled" Color="Color.Info" FullWidth="true" OnClick="BuscarLibro" StartIcon="@Icons.Material.Filled.Search">Buscar Libro</MudButton>
                            </MudItem>

                            <MudItem xs="12" md="6">
                                <MudDatePicker Label="Fecha Devolución" Margin="Margin.Dense" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy" @bind-Date="fechaDevolucion" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="estadoLibro" Label="Estado del Libro" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>

                            <MudItem xs="12" class="d-flex justify-content-center">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Registrar" Class="mx-2">Registrar</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Limpiar" Class="mx-2">Limpiar</MudButton>
                            </MudItem>

                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

        </MudGrid>

    </MudPaper>

</MudContainer>

@code {
    DateTime? fechaDevolucion = DateTime.Today;
    private PrestamoDTO _prestamo;
    private LectorDTO _lector;
    private LibroDTO _libro = new LibroDTO();
    private string estadoLibro = "";

    protected override async Task OnInitializedAsync()
    {
        _menuServicio.SetMenu(new BreadcrumbItem("Registrar Préstamo", href: null));
    }

    private async Task BuscarLibro()
    {
        var dialogo = _dialogServicio.Show<LstLibros>("Buscar Libro", new DialogOptions() { Position = DialogPosition.TopCenter });
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            _libro = (LibroDTO)resultado.Data;
        }
    }

    private async Task<IEnumerable<LectorDTO>> BuscarLector(string valor)
    {
        var response = await _lectorServicio.Lista();
        if (response.status)
        {
            if (string.IsNullOrEmpty(valor))
                return new List<LectorDTO>();
            List<LectorDTO> lista = (List<LectorDTO>)response.value!;
            return lista.FindAll(p => string.Concat(p.Codigo, p.Nombre, p.Apellido).Contains(valor, StringComparison.InvariantCultureIgnoreCase));
        }
        return new List<LectorDTO>();
    }

    private async Task Limpiar()
    {
        estadoLibro = "";
        _lector = null;
        _libro = new LibroDTO();
        fechaDevolucion = DateTime.Today;
    }

    private async Task Registrar()
    {
        if (_lector == null)
        {
            await Swal.FireAsync("Oops...", "Debe seleccionar un lector!", "error");
            return;
        }

        if (_libro.IdLibro == 0)
        {
            await Swal.FireAsync("Oops...", "Debe seleccionar un libro!", "error");
            return;
        }

        _prestamo = new PrestamoDTO
            {
                IdEstadoPrestamo = 1,
                IdLector = _lector.IdLector,
                IdLibro = _libro.IdLibro,
                FechaDevolucion = fechaDevolucion,
                EstadoEntregado = estadoLibro
            };

        var response = await _prestamoServicio.Crear(_prestamo);

        if (response.status)
        {
            PrestamoDTO prestamoDTO = (PrestamoDTO)response.value!;
            _prestamo = null;
            _lector = null;
            _libro = new LibroDTO();
            estadoLibro = "";
            fechaDevolucion = DateTime.Today;

            await Swal.FireAsync("Préstamo Registrado", $"Código préstamo: {prestamoDTO.Codigo}", "success");
        }
        else
        {
            await Swal.FireAsync("Oops...", "No se pudo registrar el préstamo!", "error");
        }
    }
}
