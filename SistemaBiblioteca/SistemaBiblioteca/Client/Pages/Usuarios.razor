@page "/pages/usuarios"
@using SistemaBiblioteca.Client.Pages.Modales;
@inject MenuService _menuServicio;
@inject IUsuarioServicio _usuarioServicio;
@inject IDialogService _dialogServicio;
@inject ISnackbar _snackBar;
@inject SweetAlertService Swal;

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <!-- Sección Principal con fondo suave y sombra -->
    <MudPaper Elevation="10" Class="pa-6" Width="100%" Style="background-color: #F4F6F9;">
        <MudGrid>
            <!-- Botón para Nuevo Usuario -->
            <MudItem xs="12" md="4">
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Add"
                           Color="Color.Primary"
                           OnClick="AbrirNuevoUsuario"
                           FullWidth="true"
                           Class="mb-4"
                           Style="font-size: 18px; padding: 15px;">
                    Nuevo Usuario
                </MudButton>
            </MudItem>

            <!-- Caja de Búsqueda de Usuarios -->
            <MudItem xs="12" md="8">
                <MudTextField @bind-Value="searchString1"
                              Placeholder="Buscar por nombre o correo"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mb-4"
                              Variant="Variant.Outlined"
                              FullWidth="true" 
                              Style="max-width: 500px;"/>
            </MudItem>

            <!-- Tabla de Usuarios -->
            <MudItem xs="12">
                <MudTable Items="@listaUsuarios"
                          Dense="true"
                          Striped="true"
                          Bordered="true"
                          Filter="new Func<UsuarioDTO,bool>(FilterFunc1)"
                          @bind-SelectedItem="selectedItem1"
                          Loading="@_loading"
                          LoadingProgressColor="Color.Info"
                          Style="background-color: white; border-radius: 10px;">
                    <HeaderContent>
                        <MudTh>Nombre Completo</MudTh>
                        <MudTh>Correo</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>

                    <!-- Contenido de la Fila de Usuarios -->
                    <RowTemplate Context="usuarioRow">
                        <MudTd DataLabel="Nombre Completo">@usuarioRow.NombreApellidos</MudTd>
                        <MudTd DataLabel="Correo">@usuarioRow.Correo</MudTd>
                        <MudTd DataLabel="Acciones" Class="d-flex justify-content-center">
                            <MudButton Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       Size="Size.Small"
                                       OnClick="@(() => AbrirEditarUsuario(usuarioRow))"
                                       Class="mr-2"
                                       Style="min-width: 80px; font-size: 14px; text-transform: capitalize;">
                                Editar
                            </MudButton>
                            <MudButton Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Size="Size.Small"
                                       OnClick="@(() => EliminarUsuario(usuarioRow))"
                                       Style="min-width: 80px; font-size: 14px; text-transform: capitalize;">
                                Eliminar
                            </MudButton>
                        </MudTd>
                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudPaper>

</MudContainer>

@code {
        List<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    private string searchString1 = "";
    private UsuarioDTO selectedItem1 = null;
    private bool _loading = true;

    private async Task ObtenerUsuarios()
    {
        var result = await _usuarioServicio.Lista();

        if (result.status)
        {
            listaUsuarios = (List<UsuarioDTO>)result.value!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _menuServicio.SetMenu(new BreadcrumbItem("Usuarios", href: null));
        await ObtenerUsuarios();
        _loading = false;
    }

    private bool FilterFunc1(UsuarioDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(UsuarioDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.NombreApellidos.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Correo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task AbrirNuevoUsuario()
    {
        var dialogo = _dialogServicio.Show<MdUsuario>("Nuevo Usuario");
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerUsuarios();
        }
    }

    private async Task AbrirEditarUsuario(UsuarioDTO usuario)
    {
        var parametros = new DialogParameters { ["_usuario"] = usuario };

        var dialogo = _dialogServicio.Show<MdUsuario>("Editar Usuario", parametros);
        var resultado = await dialogo.Result;
        if (!resultado.Canceled)
        {
            await ObtenerUsuarios();
        }
    }

    private async Task EliminarUsuario(UsuarioDTO usuario)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = $"Eliminar usuario: {usuario.NombreApellidos}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var resultado = await _usuarioServicio.Eliminar(usuario.IdUsuario);

            if (resultado)
            {
                _snackBar.Add("El usuario fue eliminado", Severity.Success, a => a.VisibleStateDuration = 500);
                await ObtenerUsuarios();
            }
            else
                _snackBar.Add("No se pudo eliminar", Severity.Error, a => a.VisibleStateDuration = 500);
        } 
    }
}    
