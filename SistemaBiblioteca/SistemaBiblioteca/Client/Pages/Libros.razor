@page "/pages/libros"
@inject MenuService _menuServicio;
@inject ILibroServicio _libroServicio
@inject IDialogService _dialogServicio
@inject ISnackbar _snackBar
@inject SweetAlertService Swal;
@inject NavigationManager _navigationServicio;

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5" Style="background: linear-gradient(135deg, #0288d1, #03a9f4); border-radius: 20px; padding: 30px; box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.2);">

    <!-- Encabezado con el botón flotante -->
    <MudPaper Elevation="12" Class="pa-8" Width="100%" Style="background-color: #0d47a1; color: white; border-radius: 20px; position: relative; overflow: hidden; text-align: center; box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.3);">
        <MudGrid>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Add"
                           Color="Color.Dark"
                           FullWidth="true"
                           OnClick="@(() => _navigationServicio.NavigateTo("/pages/libro"))"
                           Style="border-radius: 50px; font-weight: bold; text-transform: uppercase; box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3); animation: popin 0.5s ease-in-out;">
                    Nuevo Libro
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Tabla de libros -->
    <MudPaper Elevation="8" Class="pa-6 mt-4" Width="100%" Style="background-color: #ffffff; border-radius: 20px; overflow: hidden; box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.1);">
        <MudGrid>

            <MudItem xs="12">
                <MudTable Items="@listaLibros"
                          Dense="false"
                          Striped="true"
                          Bordered="true"
                          Filter="new Func<LibroDTO,bool>(FilterFunc1)"
                          @bind-SelectedItem="selectedItem1"
                          Loading="@_loading" LoadingProgressColor="Color.Info"
                          Style="border-radius: 15px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.15); transition: transform 0.3s ease; overflow: hidden;">

                    <!-- Barra de búsqueda -->
                    <ToolBarContent Style="background-color: #0288d1; border-radius: 15px; padding: 10px; box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.1);">
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Buscar por título, autor, etc."
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"
                                      Style="max-width: 450px; border-radius: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); transition: all 0.3s ease;" />
                    </ToolBarContent>

                    <!-- Encabezado de la tabla -->
                    <HeaderContent Style="background-color: #0288d1; color: white; font-weight: bold; text-transform: uppercase;">
                        <MudTh>Portada</MudTh>
                        <MudTh>Titulo</MudTh>
                        <MudTh>Autor</MudTh>
                        <MudTh>Categoria</MudTh>
                        <MudTh>Editorial</MudTh>
                        <MudTh>Ubicacion</MudTh>
                        <MudTh>Ejemplares</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>

                    <!-- Filas de la tabla -->
                    <RowTemplate Context="libroRow">
                        <MudTd DataLabel="Portada" Style="text-align: center;">
                            <MudImage Src="@("data:image/png;base64," + Convert.ToBase64String(libroRow.Portada))"
                                      Alt="@libroRow.Titulo" Elevation="5" Class="rounded-xl shadow-lg hover:scale-110 transition-all duration-300" Width="80" Height="100" />
                        </MudTd>
                        <MudTd DataLabel="Titulo" Style="font-weight: bold;">@libroRow.Titulo</MudTd>
                        <MudTd DataLabel="Autor">@libroRow.Autor</MudTd>
                        <MudTd DataLabel="Categoria">@libroRow.IdCategoriaNavigation.Descripcion</MudTd>
                        <MudTd DataLabel="Editorial">@libroRow.Editorial</MudTd>
                        <MudTd DataLabel="Ubicacion">@libroRow.Ubicacion</MudTd>
                        <MudTd DataLabel="Ejemplares">@libroRow.Ejemplares</MudTd>
                        <MudTd DataLabel="Acciones" Style="text-align: center;">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="@(() => _navigationServicio.NavigateTo($"/pages/libro/{libroRow.IdLibro}"))"
                                       Style="border-radius: 50px; padding: 8px 20px; font-weight: bold; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); transition: transform 0.2s ease-in-out;">
                                Editar
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="@(() => EliminarLibro(libroRow))"
                                       Style="border-radius: 50px; padding: 8px 20px; font-weight: bold; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); transition: transform 0.2s ease-in-out;">
                                Eliminar
                            </MudButton>
                        </MudTd>
                    </RowTemplate>

                    <!-- Paginación -->
                    <PagerContent Style="background-color: #0288d1; border-radius: 15px; box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);">
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudItem>

        </MudGrid>
    </MudPaper>

</MudContainer>

@code {
    List<LibroDTO> listaLibros = new List<LibroDTO>();
    private string searchString1 = "";
    private LibroDTO selectedItem1 = null;
    private bool _loading = true;

    private async Task ObtenerLibros()
    {
        var result = await _libroServicio.Lista();
        if (result.status)
        {
            listaLibros = (List<LibroDTO>)result.value!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _menuServicio.SetMenu(new BreadcrumbItem("Libros", href: null));
        await ObtenerLibros();
        _loading = false;
    }

    private bool FilterFunc1(LibroDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(LibroDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Titulo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Autor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.IdCategoriaNavigation.Descripcion.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Editorial.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Ubicacion.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task EliminarLibro(LibroDTO libro)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Eliminar libro: {libro.Titulo}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var resultado = await _libroServicio.Eliminar(libro.IdLibro);
            if (resultado)
            {
                _snackBar.Add("El libro fue eliminado", Severity.Success, a => a.VisibleStateDuration = 600);
                await ObtenerLibros();
            }
            else
            {
                _snackBar.Add("No se pudo eliminar", Severity.Error, a => a.VisibleStateDuration = 600);
            }
        }
    }
}
